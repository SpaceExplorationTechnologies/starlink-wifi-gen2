--- a/include/trace-cmd/trace-cmd.h
+++ b/include/trace-cmd/trace-cmd.h
@@ -250,6 +250,7 @@ struct tracecmd_option *tracecmd_add_opt
 struct tracecmd_option *tracecmd_add_buffer_option(struct tracecmd_output *handle,
 						   const char *name, int cpus);
 
+int tracecmd_write_saved_cmdlines(struct tracecmd_output *handle);
 int tracecmd_write_cpus(struct tracecmd_output *handle, int cpus);
 int tracecmd_write_options(struct tracecmd_output *handle);
 int tracecmd_update_option(struct tracecmd_output *handle,
--- a/tracecmd/trace-msg.c
+++ b/tracecmd/trace-msg.c
@@ -674,7 +674,7 @@ int tracecmd_msg_read_data(struct tracec
 	int ret;
 
 	while (!tracecmd_msg_done(msg_handle)) {
-		ret = tracecmd_msg_recv_wait(msg_handle->fd, &msg);
+		ret = tracecmd_msg_recv(msg_handle->fd, &msg);
 		if (ret < 0) {
 			if (ret == -ETIMEDOUT)
 				warning("Connection timed out\n");
--- a/tracecmd/trace-output.c
+++ b/tracecmd/trace-output.c
@@ -847,12 +847,6 @@ create_file_fd(int fd, struct tracecmd_i
 	if (read_ftrace_printk(handle))
 		goto out_free;
 
-	/*
-	 * Save the command lines;
-	 */
-	if (save_tracing_file_data(handle, "saved_cmdlines") < 0)
-		goto out_free;
-
 	return handle;
 
  out_free:
@@ -860,6 +854,11 @@ create_file_fd(int fd, struct tracecmd_i
 	return NULL;
 }
 
+int tracecmd_write_saved_cmdlines(struct tracecmd_output *handle)
+{
+	return save_tracing_file_data(handle, "saved_cmdlines");
+}
+
 static struct tracecmd_output *create_file(const char *output_file,
 					   struct tracecmd_input *ihandle,
 					   const char *tracing_dir,
@@ -874,6 +873,14 @@ static struct tracecmd_output *create_fi
 		return NULL;
 
 	handle = create_file_fd(fd, ihandle, tracing_dir, kallsyms, list, NULL);
+
+	if (handle) {
+		if (tracecmd_write_saved_cmdlines(handle) < 0) {
+			tracecmd_output_close(handle);
+			handle = NULL;
+		}
+	}
+
 	if (!handle) {
 		close(fd);
 		unlink(output_file);
--- a/tracecmd/trace-record.c
+++ b/tracecmd/trace-record.c
@@ -82,6 +82,7 @@ static int sfd;
 static int max_kb;
 
 static bool use_tcp;
+static bool with_saved_cmdlines;
 
 static int do_ptrace;
 
@@ -2967,13 +2968,19 @@ setup_connection(struct buffer_instance
 	/* Now create the handle through this socket */
 	if (msg_handle->version == V3_PROTOCOL) {
 		network_handle = tracecmd_create_init_fd_msg(msg_handle, listed_events);
-		add_options(network_handle, ctx);
-		tracecmd_write_cpus(network_handle, instance->cpu_count);
-		tracecmd_write_options(network_handle);
-		tracecmd_msg_finish_sending_data(msg_handle);
-	} else
+		if (!with_saved_cmdlines) {
+			tracecmd_write_saved_cmdlines(network_handle);
+			add_options(network_handle, ctx);
+			tracecmd_write_cpus(network_handle, instance->cpu_count);
+			tracecmd_write_options(network_handle);
+			tracecmd_msg_finish_sending_data(msg_handle);
+		}
+	} else {
 		network_handle = tracecmd_create_init_fd_glob(msg_handle->fd,
 							      listed_events);
+		if (!with_saved_cmdlines)
+			tracecmd_write_saved_cmdlines(network_handle);
+	}
 
 	instance->network_handle = network_handle;
 
@@ -2981,11 +2988,34 @@ setup_connection(struct buffer_instance
 	return msg_handle;
 }
 
-static void finish_network(struct tracecmd_msg_handle *msg_handle)
+static void finish_network(struct buffer_instance *instance, struct common_record_context *ctx)
 {
-	if (msg_handle->version == V3_PROTOCOL)
-		tracecmd_msg_send_close_msg(msg_handle);
-	tracecmd_msg_handle_close(msg_handle);
+	int i;
+
+	tracecmd_write_saved_cmdlines(instance->network_handle);
+
+	if (instance->msg_handle->version == V3_PROTOCOL) {
+		if (with_saved_cmdlines) {
+			add_options(instance->network_handle, ctx);
+
+			if (!no_top_instance()) {
+				struct trace_seq *s = top_instance.s_save;
+
+				for (i = 0; i < local_cpu_count; i++)
+					tracecmd_add_option(instance->network_handle,
+							    TRACECMD_OPTION_CPUSTAT,
+							    s[i].len+1, s[i].buffer);
+			}
+
+			tracecmd_write_cpus(instance->network_handle, instance->cpu_count);
+			tracecmd_write_options(instance->network_handle);
+			tracecmd_msg_finish_sending_data(instance->msg_handle);
+		}
+
+		tracecmd_msg_send_close_msg(instance->msg_handle);
+	}
+
+	tracecmd_msg_handle_close(instance->msg_handle);
 	free(host);
 }
 
@@ -3211,7 +3241,7 @@ static void record_data(struct common_re
 
 	for_all_instances(instance) {
 		if (instance->msg_handle)
-			finish_network(instance->msg_handle);
+			finish_network(instance, ctx);
 		else
 			local = true;
 	}
@@ -4397,6 +4427,7 @@ void update_first_instance(struct buffer
 }
 
 enum {
+	OPT_with_saved_cmdlines	= 244,
 	OPT_quiet		= 245,
 	OPT_debug		= 246,
 	OPT_no_filter		= 247,
@@ -4628,6 +4659,7 @@ static void parse_record_options(int arg
 			{"quiet", no_argument, NULL, OPT_quiet},
 			{"help", no_argument, NULL, '?'},
 			{"module", required_argument, NULL, OPT_module},
+			{"with-saved-cmdlines", no_argument, NULL, OPT_with_saved_cmdlines},
 			{NULL, 0, NULL, 0}
 		};
 
@@ -4915,6 +4947,9 @@ static void parse_record_options(int arg
 		case 'q':
 			quiet = 1;
 			break;
+		case OPT_with_saved_cmdlines:
+			with_saved_cmdlines = true;
+			break;
 		default:
 			usage(argv);
 		}
--- a/tracecmd/trace-stream.c
+++ b/tracecmd/trace-stream.c
@@ -48,6 +48,10 @@ trace_stream_init(struct buffer_instance
 			fclose(fp);
 			return NULL;
 		}
+		if (tracecmd_write_saved_cmdlines(trace_output) < 0) {
+			fclose(fp);
+			return NULL;
+		}
 		tracecmd_output_free(trace_output);
 	}
 
--- a/tracecmd/trace-usage.c
+++ b/tracecmd/trace-usage.c
@@ -57,6 +57,8 @@ static struct usage_help usage_help[] =
 		"             (use with caution)\n"
 		"          --max-graph-depth limit function_graph depth\n"
 		"          --no-filter include trace-cmd threads in the trace\n"
+		"          --with-saved-cmdlines transmit complete saved_cmdlines when"
+		"             using network connection\n"
 	},
 	{
 		"start",
