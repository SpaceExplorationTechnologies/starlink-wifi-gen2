/*
 ***************************************************************************
 * MediaTek Inc.
 *
 * All rights reserved. source code is an unpublished work and the
 * use of a copyright notice does not imply otherwise. This source code
 * contains confidential trade secret material of MediaTek. Any attemp
 * or participation in deciphering, decoding, reverse engineering or in any
 * way altering the source code is stricitly prohibited, unless the prior
 * written consent of MediaTek, Inc. is obtained.
 ***************************************************************************

	Module Name:
	mt_tx_pwr.h
*/
#ifndef __MT_TX_PWR_H__
#define __MT_TX_PWR_H__

/*******************************************************************************
 *    INCLUDED FILES
 ******************************************************************************/


/*******************************************************************************
 *    DEFINITIONS
 ******************************************************************************/

#define BF_BACKOFF_CONTROL_REGISTER_SIZE      10
#if defined(MT7626) || defined(AXE) || defined(MT7915)
#define POWER_UP_CATEGORY_RATE_NUM             12
#else
#define POWER_UP_CATEGORY_RATE_NUM             10
#endif
#define SINGLE_SKU_PARAM_NUM                  69    /* CCK(4) + OFDM(8) + HT20/40(8+9) + VHT20/40/80/160(10+10+10+10) */
#define BACKOFF_PARAM_NUM                     131  /* CCK(0+4) + OFDM(3+4) + HT20/40(10+10, 10+10) + VHT20/40/80/160(10+10, 10+10, 10+10, 10+10) */

/*******************************************************************************
 *    MACRO
 ******************************************************************************/


/*******************************************************************************
 *    TYPES
 ******************************************************************************/

struct MT_TX_PWR_CAP {
#define INTERNAL_PA 0
#define EXTERNAL_PA 1
	UINT8 pa_type;
#define TSSI_TRIGGER_STAGE 0
#define TSSI_COMP_STAGE 1
#define TSSI_CAL_STAGE 2
	UINT8 tssi_stage;
#define TSSI_0_SLOPE_G_BAND_DEFAULT_VALUE 0x84
#define TSSI_1_SLOPE_G_BAND_DEFAULT_VALUE 0x83
	UINT8 tssi_0_slope_g_band;
	UINT8 tssi_1_slope_g_band;
#define TSSI_0_OFFSET_G_BAND_DEFAULT_VALUE 0x0A
#define TSSI_1_OFFSET_G_BAND_DEFAULT_VALUE 0x0B
	UINT8 tssi_0_offset_g_band;
	UINT8 tssi_1_offset_g_band;
#define TX_TARGET_PWR_DEFAULT_VALUE 0x26
	CHAR tx_0_target_pwr_g_band;
	CHAR tx_1_target_pwr_g_band;
	CHAR tx_0_chl_pwr_delta_g_band[3];
	CHAR tx_1_chl_pwr_delta_g_band[3];
	CHAR delta_tx_pwr_bw40_g_band;

	CHAR tx_pwr_cck_1_2;
	CHAR tx_pwr_cck_5_11;
	CHAR tx_pwr_g_band_ofdm_6_9;
	CHAR tx_pwr_g_band_ofdm_12_18;
	CHAR tx_pwr_g_band_ofdm_24_36;
	CHAR tx_pwr_g_band_ofdm_48;
	CHAR tx_pwr_g_band_ofdm_54;
	CHAR tx_pwr_ht_bpsk_mcs_0_8;
	CHAR tx_pwr_ht_bpsk_mcs_32;
	CHAR tx_pwr_ht_qpsk_mcs_1_2_9_10;
	CHAR tx_pwr_ht_16qam_mcs_3_4_11_12;
	CHAR tx_pwr_ht_64qam_mcs_5_13;
	CHAR tx_pwr_ht_64qam_mcs_6_14;
	CHAR tx_pwr_ht_64qam_mcs_7_15;
};

typedef enum _POWER_ACTION_CATEGORY {
	SKU_POWER_LIMIT_CTRL = 0x0,
	PERCENTAGE_CTRL = 0x1,
	PERCENTAGE_DROP_CTRL = 0x2,
	BACKOFF_POWER_LIMIT_CTRL = 0x3,
	POWER_LIMIT_TABLE_CTRL = 0x4,
	RF_TXANT_CTRL = 0x5,
	ATEMODE_CTRL = 0x6,
	TX_POWER_SHOW_INFO = 0x7,
	TPC_FEATURE_CTRL = 0x8,
	MU_TX_POWER_CTRL = 0x9,
	BF_NDPA_TXD_CTRL = 0xa,
	TSSI_WORKAROUND = 0xb,
	THERMAL_COMPENSATION_CTRL = 0xc,
	TX_RATE_POWER_CTRL = 0xd,
	TXPOWER_UP_TABLE_CTRL = 0xe,
	TX_POWER_SET_TARGET_POWER = 0xf,
	TX_POWER_GET_TARGET_POWER = 0x10,
	POWER_ACTION_NUM
} POWER_ACTION_CATEGORY, *P_POWER_ACTION_CATEGORY;

typedef enum _THERMAL_PROTECT_ACTION_CATEGORY {
	THERMAL_PROTECT_PARAMETER_CTRL = 0x0,
	THERMAL_PROTECT_BASIC_INFO = 0x1,
	THERMAL_PROTECT_ACTION_NUM
} THERMAL_PROTECT_ACTION_CATEGORY, *P_THERMAL_PROTECT_ACTION_CATEGORY;

typedef enum _THERMAL_ACTION_CATEGORY {
	THERMAL_SENSOR_INFO_GET = 0x0,
	THERMAL_MANUAL_CTRL = 0x1,
	THERMAL_SENSOR_BASIC_INFO = 0x2,
	THERMAL_ACTION_NUM
} THERMAL_ACTION_CATEGORY, *P_THERMAL_ACTION_CATEGORY;

typedef enum _THERMAL_PROTECT_EVENT_CATEGORY {
	THERMAL_PROTECT_EVENT_REASON_NOTIFY = 0x0,
	TXPOWER_EVENT_THERMAL_PROT_SHOW_INFO = 0x1,
	THERMAL_PROTECT_EVENT_NUM
} THERMAL_PROTECT_EVENT_CATEGORY, *P_THERMAL_PROTECT_EVENT_CATEGORY;

typedef enum _TSSI_ACTION_CATEGORY {
	EPA_STATUS = 0,
	TSSI_TRACKING_ENABLE = 1,
	FCBW_ENABLE = 2,
	TSSI_COMP_BACKUP = 3,
	TSSI_COMP_CONFIG = 4
} TSSI_ACTION_CATEGORY, *P_TSSI_ACTION_CATEGORY;

typedef enum _POWER_INFO_CATEGORY {
	TXPOWER_BASIC_INFO = 0,
	TXPOWER_BACKUP_TABLE_INFO,
	TXPOWER_ALL_RATE_POWER_INFO,
	TXPOWER_THERMAL_COMP_TABLE_INFO,
	TXPOWER_TXV_BBP_PER_PACKET_INFO,
	POWER_INFO_NUM
} POWER_INFO_CATEGORY, *P_POWER_INFO_CATEGORY;


typedef enum _THERMAL_EVENT_CATEGORY {
	THERMAL_EVENT_TEMPERATURE_INFO = 0x0,
	TXPOWER_EVENT_THERMAL_SENSOR_SHOW_INFO = 0x1,
	THERMAL_EVENT_NUM
} THERMAL_EVENT_CATEGORY, *P_THERMAL_EVENT_CATEGORY;

typedef enum _POWER_EVENT_CATEGORY {
	TXPOWER_EVENT_SHOW_INFO = 0x0,
	TXPOWER_EVENT_UPDATE_COMPENSATE_TABLE = 0x1,
	TXPOWER_EVENT_UPDATE_EPA_STATUS = 0x2,
	TXPOWER_EVENT_POWER_BACKUP_TABLE_SHOW_INFO = 0x3,
	TXPOWER_EVENT_TARGET_POWER_INFO_GET = 0x4,
	TXPOWER_EVENT_SHOW_ALL_RATE_TXPOWER_INFO = 0x5,
	TXPOWER_EVENT_THERMAL_COMPENSATE_TABLE_SHOW_INFO = 0x6,
	TXPOWER_EVENT_TXV_BBP_POWER_SHOW_INFO = 0x7,
	POWER_EVENT_NUM
} POWER_EVENT_CATEGORY, *P_POWER_EVENT_CATEGORY;

typedef enum _BF_BACKOFF_MODE {
	BF_BACKOFF_1T_MODE = 1,
	BF_BACKOFF_2T_MODE = 2,
	BF_BACKOFF_3T_MODE = 3,
	BF_BACKOFF_4T_MODE = 4,
} BF_BACKOFF_MODE, *P_BF_BACKOFF_MODE;

#if defined(MT7626) || defined(AXE) || defined(MT7915)
typedef enum _POWER_BOOST_TABLE_CATEGORY {
	POWER_UP_CATE_CCK = 0,
	POWER_UP_CATE_OFDM,
	POWER_UP_CATE_HT20,
	POWER_UP_CATE_HT40,
	POWER_UP_CATE_VHT20,
	POWER_UP_CATE_VHT40,
	POWER_UP_CATE_VHT80,
	POWER_UP_CATE_VHT160,
	POWER_UP_CATE_HE26,
	POWER_UP_CATE_HE52,
	POWER_UP_CATE_HE106,
	POWER_UP_CATE_HE242,
	POWER_UP_CATE_HE484,
	POWER_UP_CATE_HE996,
	POWER_UP_CATE_HE996X2,
	POWER_UP_CATE_NUM
} POWER_BOOST_TABLE_CATEGORY, *P_POWER_BOOST_TABLE_CATEGORY;
#else
typedef enum _POWER_BOOST_TABLE_CATEGORY {
	POWER_UP_CATE_CCK_OFDM = 0,
	POWER_UP_CATE_HT20,
	POWER_UP_CATE_HT40,
	POWER_UP_CATE_VHT20,
	POWER_UP_CATE_VHT40,
	POWER_UP_CATE_VHT80,
	POWER_UP_CATE_VHT160,
	POWER_UP_CATE_NUM
} POWER_BOOST_TABLE_CATEGORY, *P_POWER_BOOST_TABLE_CATEGORY;
#endif /* defined(MT7626) */



typedef enum _ENUM_TXPOWER_TYPE_T {
    TXPOWER_TYPE_CCK = 0,
    TXPOWER_TYPE_OFDM,
    TXPOWER_TYPE_HT20,
    TXPOWER_TYPE_HT40,
    TXPOWER_TYPE_VHT20,
    TXPOWER_TYPE_VHT40,
    TXPOWER_TYPE_VHT80,
    TXPOWER_TYPE_VHT160,
    TXPOWER_TYPE_NUM
} ENUM_TXPOWER_TYPE_T, *P_ENUM_TXPOWER_TYPE_T;

typedef enum _ENUM_TXPOWER_TYPE_CCK_T {
    MODULATION_SYSTEM_CCK_1M = 0,
    MODULATION_SYSTEM_CCK_2M,
    MODULATION_SYSTEM_CCK_5M,
    MODULATION_SYSTEM_CCK_11M,
    MODULATION_SYSTEM_CCK_NUM,
} ENUM_TXPOWER_TYPE_CCK_T, *P_ENUM_TXPOWER_TYPE_CCK_T;

typedef enum _ENUM_TXPOWER_TYPE_OFDM_T {
    MODULATION_SYSTEM_OFDM_6M = 0,
    MODULATION_SYSTEM_OFDM_9M,
    MODULATION_SYSTEM_OFDM_12M,
    MODULATION_SYSTEM_OFDM_18M,
    MODULATION_SYSTEM_OFDM_24M,
    MODULATION_SYSTEM_OFDM_36M,
    MODULATION_SYSTEM_OFDM_48M,
    MODULATION_SYSTEM_OFDM_54M,
    MODULATION_SYSTEM_OFDM_NUM,
} ENUM_TXPOWER_TYPE_OFDM_T, *P_ENUM_TXPOWER_TYPE_OFDM_T;

typedef enum _ENUM_TXPOWER_TYPE_HT20_T {
    MODULATION_SYSTEM_HT20_MCS0 = 0,
    MODULATION_SYSTEM_HT20_MCS1,
    MODULATION_SYSTEM_HT20_MCS2,
    MODULATION_SYSTEM_HT20_MCS3,
    MODULATION_SYSTEM_HT20_MCS4,
    MODULATION_SYSTEM_HT20_MCS5,
    MODULATION_SYSTEM_HT20_MCS6,
    MODULATION_SYSTEM_HT20_MCS7,
    MODULATION_SYSTEM_HT20_NUM,
} ENUM_TXPOWER_TYPE_HT20_T, *P_ENUM_TXPOWER_TYPE_HT20_T;

typedef enum _ENUM_TXPOWER_TYPE_HT40_T {
    MODULATION_SYSTEM_HT40_MCS0 = 0,
    MODULATION_SYSTEM_HT40_MCS1,
    MODULATION_SYSTEM_HT40_MCS2,
    MODULATION_SYSTEM_HT40_MCS3,
    MODULATION_SYSTEM_HT40_MCS4,
    MODULATION_SYSTEM_HT40_MCS5,
    MODULATION_SYSTEM_HT40_MCS6,
    MODULATION_SYSTEM_HT40_MCS7,
    MODULATION_SYSTEM_HT40_MCS32,
    MODULATION_SYSTEM_HT40_NUM,
} ENUM_TXPOWER_TYPE_HT40_T, *P_ENUM_TXPOWER_TYPE_HT40_T;

typedef enum _ENUM_TXPOWER_TYPE_VHT20_T {
    MODULATION_SYSTEM_VHT20_MCS0 = 0,
    MODULATION_SYSTEM_VHT20_MCS1,
    MODULATION_SYSTEM_VHT20_MCS2,
    MODULATION_SYSTEM_VHT20_MCS3,
    MODULATION_SYSTEM_VHT20_MCS4,
    MODULATION_SYSTEM_VHT20_MCS5,
    MODULATION_SYSTEM_VHT20_MCS6,
    MODULATION_SYSTEM_VHT20_MCS7,
    MODULATION_SYSTEM_VHT20_MCS8,
    MODULATION_SYSTEM_VHT20_MCS9,
    MODULATION_SYSTEM_VHT20_NUM,
} ENUM_TXPOWER_TYPE_VHT20_T, *P_ENUM_TXPOWER_TYPE_VHT20_T;

typedef enum _ENUM_TXPOWER_TYPE_VHT40_T {
    MODULATION_SYSTEM_VHT40_MCS0 = 0,
    MODULATION_SYSTEM_VHT40_MCS1,
    MODULATION_SYSTEM_VHT40_MCS2,
    MODULATION_SYSTEM_VHT40_MCS3,
    MODULATION_SYSTEM_VHT40_MCS4,
    MODULATION_SYSTEM_VHT40_MCS5,
    MODULATION_SYSTEM_VHT40_MCS6,
    MODULATION_SYSTEM_VHT40_MCS7,
    MODULATION_SYSTEM_VHT40_MCS8,
    MODULATION_SYSTEM_VHT40_MCS9,
    MODULATION_SYSTEM_VHT40_NUM,
} ENUM_TXPOWER_TYPE_VHT40_T, *P_ENUM_TXPOWER_TYPE_VHT40_T;

typedef enum _ENUM_TXPOWER_TYPE_VHT80_T {
    MODULATION_SYSTEM_VHT80_MCS0 = 0,
    MODULATION_SYSTEM_VHT80_MCS1,
    MODULATION_SYSTEM_VHT80_MCS2,
    MODULATION_SYSTEM_VHT80_MCS3,
    MODULATION_SYSTEM_VHT80_MCS4,
    MODULATION_SYSTEM_VHT80_MCS5,
    MODULATION_SYSTEM_VHT80_MCS6,
    MODULATION_SYSTEM_VHT80_MCS7,
    MODULATION_SYSTEM_VHT80_MCS8,
    MODULATION_SYSTEM_VHT80_MCS9,
    MODULATION_SYSTEM_VHT80_NUM,
} ENUM_TXPOWER_TYPE_VHT80_T, *P_ENUM_TXPOWER_TYPE_VHT80_T;

typedef enum _ENUM_TXPOWER_TYPE_VHT160_T {
    MODULATION_SYSTEM_VHT160_MCS0 = 0,
    MODULATION_SYSTEM_VHT160_MCS1,
    MODULATION_SYSTEM_VHT160_MCS2,
    MODULATION_SYSTEM_VHT160_MCS3,
    MODULATION_SYSTEM_VHT160_MCS4,
    MODULATION_SYSTEM_VHT160_MCS5,
    MODULATION_SYSTEM_VHT160_MCS6,
    MODULATION_SYSTEM_VHT160_MCS7,
    MODULATION_SYSTEM_VHT160_MCS8,
    MODULATION_SYSTEM_VHT160_MCS9,
    MODULATION_SYSTEM_VHT160_NUM,
} ENUM_TXPOWER_TYPE_VHT160_T, *P_ENUM_TXPOWER_TYPE_VHT160_T;

typedef enum _ENUM_TXPOWER_LG_VHT_POWER_BW_OFFSET_T {
    MODULATION_SYSTEM_LG_VHT40_POWER_BW_OFFSET = 0,
    MODULATION_SYSTEM_LG_VHT80_POWER_BW_OFFSET,
    MODULATION_SYSTEM_LG_VHT160_POWER_BW_OFFSET,
    MODULATION_SYSTEM_LG_POWER_BW_OFFSET_NUM,
} ENUM_TXPOWER_LG_VHT_POWER_BW_OFFSET_T, *P_ENUM_TXPOWER_LG_VHT_POWER_BW_OFFSET_T;

typedef enum _ENUM_TXPOWER_VHT_POWER_MAX_BOUND_T {
    MODULATION_SYSTEM_VHT20_POWER_MAX_BOUND = 0,
    MODULATION_SYSTEM_VHT40_POWER_MAX_BOUND,
    MODULATION_SYSTEM_VHT80_POWER_MAX_BOUND,
    MODULATION_SYSTEM_VHT160_POWER_MAX_BOUND,
    MODULATION_SYSTEM_VHT_POWER_MAX_BOUND_NUM,
} ENUM_TXPOWER_VHT_POWER_MAX_BOUND_T, *P_ENUM_TXPOWER_VHT_POWER_MAX_BOUND_T;

typedef enum _ENUM_TXPOWER_POWER_MAX_MIN_BOUND_T {
    MODULATION_SYSTEM_POWER_MAX_BOUND = 0,
    MODULATION_SYSTEM_POWER_MIN_BOUND,
    MODULATION_SYSTEM_POWER_BOUND_NUM,
} ENUM_TXPOWER_POWER_MAX_MIN_BOUND_T, *P_ENUM_TXPOWER_POWER_MAX_MIN_BOUND_T;

/** Tx Power Rate Column Offset */
#define TXPOWER_RATE_CCK_OFFSET     (0)
#define TXPOWER_RATE_OFDM_OFFSET    (TXPOWER_RATE_CCK_OFFSET  + MODULATION_SYSTEM_CCK_NUM)
#define TXPOWER_RATE_HT20_OFFSET    (TXPOWER_RATE_OFDM_OFFSET + MODULATION_SYSTEM_OFDM_NUM)
#define TXPOWER_RATE_HT40_OFFSET    (TXPOWER_RATE_HT20_OFFSET + MODULATION_SYSTEM_HT20_NUM)
#define TXPOWER_RATE_VHT20_OFFSET   (TXPOWER_RATE_HT40_OFFSET + MODULATION_SYSTEM_HT40_NUM)
#define TXPOWER_RATE_VHT40_OFFSET   (TXPOWER_RATE_VHT20_OFFSET + MODULATION_SYSTEM_VHT20_NUM)
#define TXPOWER_RATE_VHT80_OFFSET   (TXPOWER_RATE_VHT40_OFFSET + MODULATION_SYSTEM_VHT40_NUM)
#define TXPOWER_RATE_VHT160_OFFSET  (TXPOWER_RATE_VHT80_OFFSET + MODULATION_SYSTEM_VHT80_NUM)
#define TXPOWER_RATE_NUM            (TXPOWER_RATE_VHT160_OFFSET + MODULATION_SYSTEM_VHT160_NUM)

typedef struct _HAL_FRAME_POWER_SET_T {
    INT8 i1FramePowerDbm;
} HAL_FRAME_POWER_SET_T, *P_HAL_FRAME_POWER_SET_T;

typedef struct _FRAME_POWER_CONFIG_INFO_T {
    HAL_FRAME_POWER_SET_T ai1FramePowerConfig[TXPOWER_RATE_NUM];
} FRAME_POWER_CONFIG_INFO_T, *P_FRAME_POWER_CONFIG_INFO_T;

/** struct for Sku Table */
typedef struct _SKU_TABLE_TYPE {
	INT8 i1PwrLimit[SINGLE_SKU_PARAM_NUM];
} SKU_TABLE_TYPE, *P_SKU_TABLE_TYPE;

/** struct for Backoff Table */
typedef struct _BACKOFF_TABLE_TYPE {
	INT8 i1PwrLimit[BACKOFF_PARAM_NUM];
} BACKOFF_TABLE_TYPE, *P_BACKOFF_TABLE_TYPE;

/** union */
typedef union _UNION_POWER_LIMIT_TABLE {
	SKU_TABLE_TYPE rSkuTbl;
	BACKOFF_TABLE_TYPE rBackoffTbl;
} UNION_POWER_LIMIT_TABLE, *P_UNION_POWER_LIMIT_TABLE;

/*******************************************************************************
 *    GLOBAL VARIABLES
 ******************************************************************************/


/*******************************************************************************
 *    FUNCTION PROTOTYPES
 ******************************************************************************/

#endif /* __MT_TX_PWR_H__ */
