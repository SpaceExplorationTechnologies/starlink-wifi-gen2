diff --git a/include/net/netfilter/nf_hnat.h b/include/net/netfilter/nf_hnat.h
index e69de29b..214dd9c1 100644
--- a/include/net/netfilter/nf_hnat.h
+++ b/include/net/netfilter/nf_hnat.h
@@ -0,0 +1,19 @@
+#include <linux/netdevice.h>
+
+#define HNAT_PATH_ETHERNET      BIT(0)
+#define HNAT_PATH_VLAN          BIT(1)
+#define HNAT_PATH_PPPOE         BIT(2)
+#define HNAT_PATH_DSLITE        BIT(3)
+#define HNAT_PATH_6RD           BIT(4)
+
+struct hnat_hw_path {
+        const struct net_device *virt_dev;
+        const struct net_device *real_dev;
+        u32 flags;
+
+        u8 eth_src[ETH_ALEN];
+        u8 eth_dest[ETH_ALEN];
+        u16 vlan_proto;
+        u16 vlan_id;
+        u16 pppoe_sid;
+};
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 04fea4f0538d..b2640195f864 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -777,6 +777,8 @@ static inline bool netdev_phys_item_id_same(struct netdev_phys_item_id *a,
 typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
 				       struct sk_buff *skb);
 
+struct hnat_hw_path;
+
 /*
  * This structure defines the management hooks for network devices.
  * The following hooks can be defined; unless noted otherwise, they are
@@ -1059,7 +1061,10 @@ typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
  *	This function is used to get egress tunnel information for given skb.
  *	This is useful for retrieving outer tunnel header parameters while
  *	sampling packet.
- *
+ * int (*ndo_hnat_check)(struct hnat_hw_path *path);
+ *      For virtual devices like vlan and pppoe, fill in the
+ *      underlying network device that can be used for offloading connections.
+ *      Return an error if HNAT offloading is not supported.
  */
 struct net_device_ops {
 	int			(*ndo_init)(struct net_device *dev);
@@ -1236,6 +1241,7 @@ struct net_device_ops {
 							 bool proto_down);
 	int			(*ndo_fill_metadata_dst)(struct net_device *dev,
 						       struct sk_buff *skb);
+	int                     (*ndo_hnat_check)(struct hnat_hw_path *path);
 };
 
 /**

