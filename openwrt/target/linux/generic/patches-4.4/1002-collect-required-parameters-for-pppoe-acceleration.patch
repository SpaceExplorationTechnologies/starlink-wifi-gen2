diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index 46448d7e..08b29906 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -54,6 +54,8 @@
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 
+#include <net/netfilter/nf_hnat.h>
+
 #define PPP_VERSION	"2.4.2"
 
 /*
@@ -1153,12 +1155,33 @@ static void ppp_dev_priv_destructor(struct net_device *dev)
 		ppp_destroy_interface(ppp);
 }
 
+static int ppp_hnat_check(struct hnat_hw_path *path)
+{
+        struct ppp *ppp = netdev_priv(path->real_dev);
+        struct ppp_channel *chan;
+        struct channel *pch;
+
+        if (ppp->flags & SC_MULTILINK)
+                return -EOPNOTSUPP;
+
+        if (list_empty(&ppp->channels))
+                return -ENODEV;
+
+        pch = list_first_entry(&ppp->channels, struct channel, clist);
+        chan = pch->chan;
+        if (!chan->ops->hnat_check)
+                return -EOPNOTSUPP;
+
+        return chan->ops->hnat_check(chan, path);
+}
+
 static const struct net_device_ops ppp_netdev_ops = {
 	.ndo_init	 = ppp_dev_init,
 	.ndo_uninit      = ppp_dev_uninit,
 	.ndo_start_xmit  = ppp_start_xmit,
 	.ndo_do_ioctl    = ppp_net_ioctl,
 	.ndo_get_stats64 = ppp_get_stats64,
+	.ndo_hnat_check  = ppp_hnat_check,
 };
 
 static void ppp_setup(struct net_device *dev)
diff --git a/drivers/net/ppp/pppoe.c b/drivers/net/ppp/pppoe.c
index 583d50f8..c138a175 100644
--- a/drivers/net/ppp/pppoe.c
+++ b/drivers/net/ppp/pppoe.c
@@ -85,6 +85,8 @@
 
 #include <asm/uaccess.h>
 
+#include <net/netfilter/nf_hnat.h>
+
 #define PPPOE_HASH_BITS 4
 #define PPPOE_HASH_SIZE (1 << PPPOE_HASH_BITS)
 #define PPPOE_HASH_MASK	(PPPOE_HASH_SIZE - 1)
@@ -992,8 +994,32 @@ static int pppoe_xmit(struct ppp_channel *chan, struct sk_buff *skb)
 	return __pppoe_xmit(sk, skb);
 }
 
+static int pppoe_hnat_check(struct ppp_channel *chan,
+                            struct hnat_hw_path *path)
+{
+        struct sock *sk = (struct sock *)chan->private;
+        struct pppox_sock *po = pppox_sk(sk);
+        struct net_device *dev = po->pppoe_dev;
+
+        if (sock_flag(sk, SOCK_DEAD) ||
+            !(sk->sk_state & PPPOX_CONNECTED) || !dev)
+                return -ENODEV;
+
+        path->real_dev = po->pppoe_dev;
+        path->flags |= HNAT_PATH_PPPOE;
+        memcpy(path->eth_src, po->pppoe_dev->dev_addr, ETH_ALEN);
+        memcpy(path->eth_dest, po->pppoe_pa.remote, ETH_ALEN);
+        path->pppoe_sid = be16_to_cpu(po->num);
+
+        if (path->real_dev->netdev_ops->ndo_hnat_check)
+                return path->real_dev->netdev_ops->ndo_hnat_check(path);
+
+        return 0;
+}
+
 static const struct ppp_channel_ops pppoe_chan_ops = {
 	.start_xmit = pppoe_xmit,
+	.hnat_check = pppoe_hnat_check,
 };
 
 static int pppoe_recvmsg(struct socket *sock, struct msghdr *m,
diff --git a/include/linux/ppp_channel.h b/include/linux/ppp_channel.h
index 5d87f810..22e21065 100644
--- a/include/linux/ppp_channel.h
+++ b/include/linux/ppp_channel.h
@@ -32,6 +32,7 @@ struct ppp_channel_ops {
 	int	(*start_xmit)(struct ppp_channel *, struct sk_buff *);
 	/* Handle an ioctl call that has come in via /dev/ppp. */
 	int	(*ioctl)(struct ppp_channel *, unsigned int, unsigned long);
+	int	(*hnat_check)(struct ppp_channel *, struct hnat_hw_path *);
 };
 
 struct ppp_channel {
