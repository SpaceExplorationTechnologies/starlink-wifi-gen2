--- a/drivers/usb/host/ohci.h
+++ b/drivers/usb/host/ohci.h
@@ -122,7 +122,7 @@ struct td {
 	/* PSW is only for ISO.  Only 1 PSW entry is used, but on
 	 * big-endian PPC hardware that's the second entry.
 	 */
-#define MAXPSW	2
+#define MAXPSW	8
 	__hc16		hwPSW [MAXPSW];
 
 	/* rest are purely for the driver's use */
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@ -441,6 +441,7 @@ static int ohci_init (struct ohci_hcd *o
 {
 	int ret;
 	struct usb_hcd *hcd = ohci_to_hcd(ohci);
+	u32 hcca_area;
 
 	/* Accept arbitrarily long scatter-gather lists */
 	hcd->self.sg_tablesize = ~0;
@@ -501,11 +502,13 @@ static int ohci_init (struct ohci_hcd *o
 			(unsigned long) ohci);
 	set_timer_slack(&ohci->io_watchdog, msecs_to_jiffies(20));
 
-	ohci->hcca = dma_alloc_coherent (hcd->self.controller,
-			sizeof(*ohci->hcca), &ohci->hcca_dma, GFP_KERNEL);
+	hcca_area = ohci_readl(ohci, &ohci->regs->hcca);
+	ohci->hcca = ioremap_nocache(hcca_area, sizeof *ohci->hcca);
 	if (!ohci->hcca)
 		return -ENOMEM;
 
+	ohci->hcca_dma = hcca_area;
+
 	if ((ret = ohci_mem_init (ohci)) < 0)
 		ohci_stop (hcd);
 	else {
@@ -523,6 +526,7 @@ static int ohci_init (struct ohci_hcd *o
  */
 static int ohci_run (struct ohci_hcd *ohci)
 {
+	int			i = 0;
 	u32			mask, val;
 	int			first = ohci->fminterval == 0;
 	struct usb_hcd		*hcd = ohci_to_hcd(ohci);
@@ -573,6 +577,8 @@ static int ohci_run (struct ohci_hcd *oh
 	msleep(val);
 
 	memset (ohci->hcca, 0, sizeof (struct ohci_hcca));
+	for (i = 0; i < NUM_INTS; i++)
+		ohci->hcca->int_table[i] = 0;
 
 	/* 2msec timelimit here means no irqs/preempt */
 	spin_lock_irq (&ohci->lock);
@@ -984,9 +990,6 @@ static void ohci_stop (struct usb_hcd *h
 	remove_debug_files (ohci);
 	ohci_mem_cleanup (ohci);
 	if (ohci->hcca) {
-		dma_free_coherent (hcd->self.controller,
-				sizeof *ohci->hcca,
-				ohci->hcca, ohci->hcca_dma);
 		ohci->hcca = NULL;
 		ohci->hcca_dma = 0;
 	}
