diff -urN a/drivers/mtd/mtdcore.c b/drivers/mtd/mtdcore.c
--- a/drivers/mtd/mtdcore.c	2018-10-01 09:54:39.842564000 +0800
+++ b/drivers/mtd/mtdcore.c	2018-10-01 10:01:00.042636000 +0800
@@ -919,6 +919,40 @@
 }
 EXPORT_SYMBOL_GPL(mtd_get_unmapped_area);
 
+/*
+ * LEDE OpenWRT split rootfs from Kernel partition, to split rootfs,
+ * nand check bad is necessary, to read bad block marker, nfc has to
+ * read the data and mark swap, this take a lot of time, to reduce
+ * nand flash access, use a table to store the result of bad blocks.
+ */
+static int lede_split_isbad(struct mtd_info *mtd, loff_t ofs)
+{
+	static unsigned int split_isbad_init;
+	static u_char *tbl;
+	static unsigned int kofs;
+	unsigned int size, index;
+	int ret;
+
+	if (!split_isbad_init) {
+		kofs = (unsigned int) mtdpart_get_offset(mtd);
+		split_isbad_init = 1;
+		size = (unsigned int)mtd->size >> mtd->erasesize_shift;
+		tbl = kmalloc(size, GFP_KERNEL);
+		memset(tbl, 0xff, size);
+	}
+
+	index = (unsigned int)(ofs + mtdpart_get_offset(mtd) - kofs)
+			      >> mtd->erasesize_shift;
+	if (tbl[index] == 0xff) {
+		ret = mtd_block_isbad(mtd, ofs);
+		tbl[index] = (u_char)ret;
+	} else {
+		ret = (int) tbl[index];
+	}
+
+	return ret;
+}
+
 /* Learn total bad block number before access offs+len */
 int mtd_countbad(struct mtd_info *mtd, loff_t offs, unsigned int len)
 {
@@ -926,10 +960,10 @@
 	loff_t offset = 0;
 
 	while ((offs + len) > offset) {
-		if (mtd_block_isbad(mtd, offset) > 0) {
+		if (lede_split_isbad(mtd, offset) > 0) {
 			bad++;
 			offs += mtd->erasesize;
-		} else if (mtd_block_isbad(mtd, offset) < 0) {
+		} else if (lede_split_isbad(mtd, offset) < 0) {
 			pr_err("len should not be over partition end\n");
 			return bad;
 		}
