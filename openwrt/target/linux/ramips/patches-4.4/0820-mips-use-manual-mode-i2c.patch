From 63551b37aa035daaa50a57b919fcadebdcc28a14 Mon Sep 17 00:00:00 2001
From: Sam Shih <sam.shih@mediatek.com>
Date: Mon, 3 Feb 2020 11:32:06 +0800
Subject: [PATCH] [WCNCR00200395][Use MT7621 i2c manual to replace automode]

[Description]
Add MT7621 i2c manual support to customer GPIO controller: LP3943

- Use i2c manual mode to replace automode
  Due to Auto mode waveform not suitable for customer gpio module:
  In mt7621 i2c read flow, read register from client deveice is
  composed of a dummy write command #1 and a read command #2,
  and in mt7621 i2c write flow, write register to client device is
  composed of a addr write command #1 and a data write command #2.
  In automode, no matter read register or write register case,
  the hardware delay between previous #1 and #2 are too long,
  this make LP3943 not work, so we need to use manual to control
  the i2c waveform by software.

- Add two workaorund to improve mt7621 i2c waveform with LP3943
  1. Add delay between two i2c_trasfer to prevent broken waveform
  2. Add delay between previous #1 and #2 to prevent broken waveform

- Fix i2c manual mode bug in dummy-write
  1. Make sure command is a dummy-write by checking i2c msg length.

[Release-log]
N/A

Change-Id: Ia2a553bac970bf983eefa139ee9d89aca3960b74
---
 drivers/i2c/busses/i2c-mt7621.c | 220 +++++++++++++++++++++++++++++++-
 1 file changed, 219 insertions(+), 1 deletion(-)

diff --git a/drivers/i2c/busses/i2c-mt7621.c b/drivers/i2c/busses/i2c-mt7621.c
index ca6eecd33..554e24b7c 100644
--- a/drivers/i2c/busses/i2c-mt7621.c
+++ b/drivers/i2c/busses/i2c-mt7621.c
@@ -48,6 +48,70 @@
 #define REG_PINTST		0x60
 #define REG_PINTCL		0x64
 
+#define I2C_MANUAL_MODE
+
+#ifdef I2C_MANUAL_MODE
+#define MM_I2C_REG_BASE		0x0
+#define MM_I2C_CONFIG_REG	(MM_I2C_REG_BASE + 0x00)
+#define MM_I2C_CLKDIV_REG	(MM_I2C_REG_BASE + 0x04)
+#define MM_I2C_DEVADDR_REG	(MM_I2C_REG_BASE + 0x08)
+#define MM_I2C_ADDR_REG		(MM_I2C_REG_BASE + 0x0C)
+#define MM_I2C_DATAOUT_REG	(MM_I2C_REG_BASE + 0x10)
+#define MM_I2C_DATAIN_REG	(MM_I2C_REG_BASE + 0x14)
+#define MM_I2C_STATUS_REG	(MM_I2C_REG_BASE + 0x18)
+#define MM_I2C_STARTXFR_REG	(MM_I2C_REG_BASE + 0x1C)
+#define MM_I2C_BYTECNT_REG	(MM_I2C_REG_BASE + 0x20)
+#define MM_I2C_AUTOMODE_REG	(MM_I2C_REG_BASE + 0x28)
+#define MM_I2C_SM0CTL0_REG	(MM_I2C_REG_BASE + 0x40)
+#define MM_I2C_SM0CTL1_REG	(MM_I2C_REG_BASE + 0x44)
+#define MM_I2C_SM0D0_REG	(MM_I2C_REG_BASE + 0x50)
+#define MM_I2C_SM0D1_REG	(MM_I2C_REG_BASE + 0x54)
+/* I2C_SM0_CTL register bit field */
+#define MM_SM0_ODRAIN_PULL	(0x1 << 31)			/* The output is pulled hight by SIF master 0 */
+#define MM_SM0_VSYNC_PULSE	(0x1 << 28)			/* Allow triggered in VSYNC pulse */
+#define MM_SM0_WAIT_H		(0x1 << 6)			/* Output H when SIF master 0 is in WAIT state */
+#define MM_SM0_EN		(0x1 << 1)			/* Enable SIF master 0 */
+/* I2C_SM1_CTL register bit field */
+#define MM_SM0_ACK		(0xff << 16)			/* Acknowledge of 8 bytes of data */
+#define MM_SM0_TRI		(0x1 << 0)			/* Trigger serial interface */
+#define MM_SM0_MODE_START	((0x1 << 4) | MM_SM0_TRI)	/* SIF master mode start */
+#define MM_SM0_MODE_WRITE_DATA	((0x2 << 4) | MM_SM0_TRI)	/* SIF master mode write data */
+#define MM_SM0_MODE_STOP	((0x3 << 4) | MM_SM0_TRI)	/* SIF master mode stop */
+#define MM_SM0_MODE_READ_NACK 	((0x4 << 4) | MM_SM0_TRI)	/* SIF master mode read data with no ack for final byte */
+#define MM_SM0_MODE_READ_ACK	((0x5 << 4) | MM_SM0_TRI)	/* SIF master mode read data with ack */
+#define MM_SM0_PGLEN(x)		((x) << 8)			/* Page length */
+#define MM_SM0_MAX_PGLEN	(0x7 << 8)			/* Max page length */
+/* I2C_CFG register bit field */
+#define MM_CFG_ADDRLEN_8	(0x7 << 5)			/* 8 bits */
+#define MM_CFG_DEVADLEN_7	(0x6 << 2)			/* 7 bits */
+#define MM_CFG_ADDRDIS		(0x1 << 1)			/* Disable address transmission*/
+#define MM_CFG_DEFAULT		(MM_CFG_ADDRLEN_8 | MM_CFG_DEVADLEN_7 | MM_CFG_ADDRDIS)
+/* register access command */
+#define MM_REG_CMD_W(_i2c, _reg, _val)	mtk_i2c_w32(_i2c, _val, _reg)
+#define MM_REG_CMD_R(_i2c, _reg)	mtk_i2c_r32(_i2c, _reg)
+/* common variable */
+/* source clock */
+#define MM_PERI_CLK		50000
+#define MM_MAX_MODE_SPEED	500	/* khz */
+static int mm_delay_timing = MM_PERI_CLK / (MM_MAX_MODE_SPEED * 2);
+#define MM_DATARDY		0x04
+#define MM_SDOEMPTY		0x02
+#define MM_DATABUSY		0x01
+#define MM_READ_BLOCK		16
+#define MM_MAX_SIZE		64
+/* Serial interface master data max byte count  */
+#define MM_SM0_DATA_COUNT	4
+/* Serial data shift */
+#define MM_SM0_DATA_SHIFT(x)	((x & 0x3) << 3)
+/* controller speed limitation*/
+#define MM_ST_MODE_SPEED	100	/* khz */
+#define MM_FS_MODE_SPEED	400	/* khz */
+#define MM_MAX_MODE_SPEED	500	/* khz */
+/* Instruction codes */
+#define MM_READ_CMD		0x1
+#define MM_WRITE_CMD		0x0
+#endif /* I2C_MANUAL_MODE */
+
 /* REG_SM0CFG0 */
 #define I2C_DEVADDR_MASK	0x7f
 
@@ -196,8 +260,13 @@ static void mtk_i2c_reset(struct mtk_i2c *i2c)
 		WAIT_HIGH | SM0_EN;
 	mtk_i2c_w32(i2c, reg, REG_SM0CTL0);
 
+#ifdef I2C_MANUAL_MODE
+	/* manual mode */
+	mtk_i2c_w32(i2c, 0x0, REG_SM0CFG2);
+#else
 	/* auto mode */
 	mtk_i2c_w32(i2c, AUTOMODE_EN, REG_SM0CFG2);
+#endif /* I2C_MANUAL_MODE */
 }
 
 static void mtk_i2c_dump_reg(struct mtk_i2c *i2c)
@@ -218,6 +287,151 @@ static void mtk_i2c_dump_reg(struct mtk_i2c *i2c)
 			mtk_i2c_r32(i2c, REG_SM0CTL1));
 }
 
+#ifdef I2C_MANUAL_MODE
+static void manual_mode_read(struct mtk_i2c *i2c, struct i2c_msg* msg)
+{
+	int i, cnt;
+	u32 reg, data0, data1;
+
+	/* re-start */
+	MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_START);
+	/* Write address for read */
+	MM_REG_CMD_W(i2c, MM_I2C_SM0D0_REG, (msg->addr << 1) | MM_READ_CMD);
+	//udelay(mm_delay_timing);
+	udelay(100);
+
+	MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_WRITE_DATA);
+	//udelay(mm_delay_timing);
+	udelay(100);
+	while(!(MM_REG_CMD_R(i2c, MM_I2C_SM0CTL0_REG) & MM_SM0_ACK));
+
+	for (cnt = 0; cnt < msg->len; cnt += (2 * MM_SM0_DATA_COUNT)) {
+		if ((msg->len - cnt) > (2 * MM_SM0_DATA_COUNT))
+			reg = MM_SM0_MODE_READ_ACK | MM_SM0_MAX_PGLEN;
+		else
+			reg = MM_SM0_MODE_READ_NACK | MM_SM0_PGLEN((msg->len - cnt) - 1);
+		/* read data */
+		MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, reg);
+		//udelay(mm_delay_timing);
+		udelay(100);
+
+		data0 = MM_REG_CMD_R(i2c, MM_I2C_SM0D0_REG);
+		data1 = MM_REG_CMD_R(i2c, MM_I2C_SM0D1_REG);
+
+		for (i = 0; i < (msg->len - cnt); i++) {
+			if (i < MM_SM0_DATA_COUNT)
+				msg->buf[cnt + i] = (data0 >> MM_SM0_DATA_SHIFT(i)) & 0xff;
+			else
+				msg->buf[cnt + i] = (data1 >> MM_SM0_DATA_SHIFT(i)) & 0xff;
+		}
+	}
+	/* stop */
+	MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_STOP);}
+
+static void manual_mode_write(struct mtk_i2c *i2c, struct i2c_msg* msg, int num)
+{
+	int i, cnt;
+	u32 data0, data1, reg;
+
+	/* Start */
+	MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_START);
+	/* Write address for write */
+	MM_REG_CMD_W(i2c, MM_I2C_SM0D0_REG, (msg->addr << 1) | MM_WRITE_CMD);
+	//udelay(mm_delay_timing);
+	udelay(100);
+
+	MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_WRITE_DATA);
+	//udelay(mm_delay_timing);
+	udelay(100);
+	/* wait slave ack */
+	while(!(MM_REG_CMD_R(i2c, MM_I2C_SM0CTL0_REG) & MM_SM0_ACK));
+
+	for (cnt = 0; cnt < msg->len; cnt += (2 * MM_SM0_DATA_COUNT)) {
+		data0 = data1 = 0;
+		for (i = 0; i < (msg->len - cnt); i++) {
+			if (i < MM_SM0_DATA_COUNT)
+				data0 |= msg->buf[cnt + i] << MM_SM0_DATA_SHIFT(i);
+			else
+				data1 |= msg->buf[cnt + i] << MM_SM0_DATA_SHIFT(i);
+		}
+		MM_REG_CMD_W(i2c, MM_I2C_SM0D0_REG, data0);
+		MM_REG_CMD_W(i2c, MM_I2C_SM0D1_REG, data1);
+		//udelay(mm_delay_timing);
+		udelay(100);
+
+		if ((msg->len - i) >= (2 * MM_SM0_DATA_COUNT))
+			reg = MM_SM0_MODE_WRITE_DATA | MM_SM0_MAX_PGLEN;
+		else
+			reg = MM_SM0_MODE_WRITE_DATA | MM_SM0_PGLEN((msg->len - cnt) - 1);
+		/* write data */
+		MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, reg);
+		//udelay(mm_delay_timing);
+		udelay(100);
+		while(!(MM_REG_CMD_R(i2c, MM_I2C_SM0CTL0_REG) & MM_SM0_ACK));
+	}
+
+	/* Workaround #1: add delay between dummy-write and read */
+	if ((msg + 1)->flags == I2C_M_RD && num >= 2) {
+		return;
+	}else{
+		udelay(100);
+	}
+
+	/* Fix #0: ignore I2C_STOP action only when i2c msg is dummy-write  */
+	if ((msg + 1)->flags == I2C_M_RD && num >= 2){
+		return;
+	}else {
+		/* stop */
+		MM_REG_CMD_W(i2c, MM_I2C_SM0CTL1_REG, MM_SM0_MODE_STOP);
+	}
+}
+#endif /* I2C_MANUAL_MODE */
+
+#ifdef I2C_MANUAL_MODE
+static int mtk_i2c_master_mm_xfer(struct i2c_adapter *adap,
+				  struct i2c_msg* msgs, int num)
+{
+	struct mtk_i2c *i2c;
+	struct i2c_msg *pmsg;
+	int left_num = num;
+	int i;
+	int ret;
+
+	i2c = i2c_get_adapdata(adap);
+
+
+	for (i = 0; i < num; i++) {
+		pmsg = &msgs[i];
+		if (pmsg->flags & I2C_M_TEN) {
+			dev_dbg(i2c->dev, "10 bits addr not supported\n");
+			return -EINVAL;
+		}
+
+		if (pmsg->len > MM_MAX_SIZE) {
+			dev_dbg(i2c->dev, "please reduce data length\n");
+			return -EINVAL;
+		}
+
+		/* buffer length */
+		if (pmsg->len == 0) {
+			dev_dbg(i2c->dev, "length is 0\n");
+			return -EINVAL;
+		}
+
+		if (pmsg->flags & I2C_M_RD)
+			manual_mode_read(i2c, pmsg);
+		else
+			manual_mode_write(i2c, pmsg, num);
+
+	}
+	/* Workaround #2 : add delay between i2c_master_xfer  */
+	udelay(200);
+	/* the return value is number of executed messages */
+	ret = i;
+
+	return ret;
+}
+#else
 static int mtk_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 		int num)
 {
@@ -303,6 +517,7 @@ err_timeout:
 	mtk_i2c_reset(i2c);
 	return ret;
 }
+#endif /* I2C_MANUAL_MODE */
 
 static u32 mtk_i2c_func(struct i2c_adapter *a)
 {
@@ -310,7 +525,11 @@ static u32 mtk_i2c_func(struct i2c_adapter *a)
 }
 
 static const struct i2c_algorithm mtk_i2c_algo = {
+#ifdef I2C_MANUAL_MODE
+	.master_xfer	= mtk_i2c_master_mm_xfer,
+#else
 	.master_xfer	= mtk_i2c_master_xfer,
+#endif
 	.functionality	= mtk_i2c_func,
 };
 
@@ -331,7 +550,6 @@ static void mtk_i2c_init(struct mtk_i2c *i2c)
 	i2c->clk_div = clk_get_rate(i2c->clk) / i2c->cur_clk;
 	if (i2c->clk_div > CLK_DIV_MASK)
 		i2c->clk_div = CLK_DIV_MASK;
-
 	mtk_i2c_reset(i2c);
 }
 
-- 
2.17.1

