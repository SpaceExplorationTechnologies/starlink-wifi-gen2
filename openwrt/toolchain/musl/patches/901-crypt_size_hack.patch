--- a/src/crypt/crypt_r.c
+++ b/src/crypt/crypt_r.c
@@ -19,12 +19,6 @@ char *__crypt_r(const char *key, const c
 	if (salt[0] == '$' && salt[1] && salt[2]) {
 		if (salt[1] == '1' && salt[2] == '$')
 			return __crypt_md5(key, salt, output);
-		if (salt[1] == '2' && salt[3] == '$')
-			return __crypt_blowfish(key, salt, output);
-		if (salt[1] == '5' && salt[2] == '$')
-			return __crypt_sha256(key, salt, output);
-		if (salt[1] == '6' && salt[2] == '$')
-			return __crypt_sha512(key, salt, output);
 	}
 	return __crypt_des(key, salt, output);
 }
--- a/src/crypt/crypt_sha512.c
+++ b/src/crypt/crypt_sha512.c
@@ -12,6 +12,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdint.h>
+#if 0
 
 /* public domain sha512 implementation based on fips180-3 */
 /* >=2^64 bits messages are not supported (about 2000 peta bytes) */
@@ -369,3 +370,4 @@ char *__crypt_sha512(const char *key, co
 		return "*";
 	return p;
 }
+#endif
--- a/src/crypt/crypt_blowfish.c
+++ b/src/crypt/crypt_blowfish.c
@@ -50,6 +50,7 @@
 #include <string.h>
 #include <stdint.h>
 
+#if 0
 typedef uint32_t BF_word;
 typedef int32_t BF_word_signed;
 
@@ -796,3 +797,4 @@ char *__crypt_blowfish(const char *key,
 
 	return "*";
 }
+#endif
--- a/src/crypt/crypt_sha256.c
+++ b/src/crypt/crypt_sha256.c
@@ -13,6 +13,7 @@
 #include <string.h>
 #include <stdint.h>
 
+#if 0
 /* public domain sha256 implementation based on fips180-3 */
 
 struct sha256 {
@@ -320,3 +321,4 @@ char *__crypt_sha256(const char *key, co
 		return "*";
 	return p;
 }
+#endif
